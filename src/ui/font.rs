type GlyphMap = [u16; 10];

pub static FONT: [GlyphMap; 26 * 2 + 1] = [
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ],
    [ 0x7FF8, 0x7FFC, 0x38E, 0x187, 0x183, 0x183, 0x187, 0x38E, 0x7FFC, 0x7FF8 ], // A
    [ 0x7FFF, 0x7FFF, 0x6183, 0x6183, 0x6183, 0x6183, 0x61C6, 0x337E, 0x3F3C, 0x1E00 ], // B
    [ 0x3FFE, 0x7FFF, 0x7007, 0x6003, 0x6003, 0x6003, 0x6003, 0x7007, 0x7C1F, 0x3C1E ], // C
    [ 0x7FFF, 0x7FFF, 0x6003, 0x6003, 0x6003, 0x6003, 0x6003, 0x3006, 0x3FFE, 0x1FFC ], // D
    [ 0x7FFF, 0x7FFF, 0x6183, 0x6183, 0x6183, 0x6183, 0x6183, 0x6183, 0x6003, 0x6003 ], // E
    [ 0x7FFF, 0x7FFF, 0x183, 0x183, 0x183, 0x183, 0x183, 0x183, 0x3, 0x3 ], // F
    [ 0x3FFE, 0x7FFF, 0x7007, 0x6003, 0x6003, 0x6003, 0x6183, 0x7187, 0x3F9E, 0x3F9E ], // G
    [ 0x7FFF, 0x7FFF, 0x180, 0x180, 0x180, 0x180, 0x180, 0x180, 0x7FFF, 0x7FFF ], // H
    [ 0, 0x6003, 0x6003, 0x6003, 0x7FFF, 0x7FFF, 0x6003, 0x6003, 0x6003, 0 ], // I
    [ 0x3800, 0x7800, 0x7000, 0x6000, 0x6000, 0x6000, 0x6000, 0x7000, 0x7FFF, 0x3FFF ], // J
    [ 0x7FFF, 0x7FFF, 0x1C0, 0x3E0, 0x770, 0xE38, 0x1C1C, 0x380E, 0x7007, 0x6003 ], // K
    [ 0x7FFF, 0x7FFF, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000, 0x6000 ], // L
    [ 0x7FFF, 0x7FFF, 0x1F, 0x7C, 0x1F0, 0x1F0, 0x7C, 0x1F, 0x7FFF, 0x7FFF ], // M
    [ 0x7FFF, 0x7FFF, 0x1F, 0x7C, 0x1F0, 0x7C0, 0x1F00, 0x7C00, 0x7FFF, 0x7FFF ], // N
    [ 0x3FFE, 0x7FFF, 0x7007, 0x6003, 0x6003, 0x6003, 0x6003, 0x7007, 0x7FFF, 0x3FFE ], // O
    [ 0x7FFF, 0x7FFF, 0x183, 0x183, 0x183, 0x183, 0x183, 0x1C7, 0xFE, 0x7C ], // P
    [ 0x3FFE, 0x7FFF, 0x7007, 0x6003, 0x6003, 0x6C03, 0x7C03, 0x3807, 0x7FFF, 0x6FFE ], // Q
    [ 0x7FFF, 0x7FFF, 0x183, 0x383, 0x783, 0xF83, 0x1D83, 0x39C7, 0x70FE, 0x607C ], // R
    [ 0x187C, 0x38FE, 0x71C7, 0x6183, 0x6183, 0x6183, 0x6183, 0x7387, 0x3F0E, 0x1E0C ], // S
    [ 0x3, 0x3, 0x3, 0x3, 0x7FFF, 0x7FFF, 0x3, 0x3, 0x3, 0x3 ], // T
    [ 0x3FFF, 0x7FFF, 0x7000, 0x6000, 0x6000, 0x6000, 0x6000, 0x7000, 0x7FFF, 0x3FFF ], // U
    [ 0xF, 0x7F, 0x3F8, 0x1FC0, 0x7C00, 0x7C00, 0x1FC0, 0x3F8, 0x7F, 0xF ], // V
    [ 0x7FFF, 0x7FFF, 0x7C00, 0x1F00, 0x7C0, 0x7C0, 0x1F00, 0x7C00, 0x7FFF, 0x7FFF ], // W
    [ 0x780F, 0x7C1F, 0xE38, 0x770, 0x3E0, 0x3E0, 0x770, 0xE38, 0x7C1F, 0x780F ], // X
    [ 0x1F, 0x3F, 0x70, 0xE0, 0x7FC0, 0x7FC0, 0xE0, 0x70, 0x3F, 0x1F ], // Y
    [ 0x780F, 0x7C0F, 0x6E03, 0x6703, 0x6383, 0x61C3, 0x60E3, 0x6073, 0x783F, 0x781F ], // Z
    [ 0x3000, 0x7980, 0x6DC0, 0x44C0, 0x44C0, 0x44C0, 0x44C0, 0b10110111000000, 0x7F80, 0x7F00 ], // a
    [ 0x7FFC, 0x7FFC, 0x3180, 0x60C0, 0x60C0, 0x60C0, 0x60C0, 0x7180, 0x3F80, 0x1F00 ], // b
    [ 0x1F00, 0x3F80, 0x71C0, 0x60C0, 0x60C0, 0x60C0, 0x60C0, 0x71C0, 0x3B80, 0x1B00 ], // c
    [ 0x1F00, 0x3F80, 0x7180, 0x60C0, 0x60C0, 0x60C0, 0x60C0, 0x3180, 0x7FFC, 0x7FFC ], // d
    [ 0x1F00, 0x3F80, 0x75C0, 0x64C0, 0x64C0, 0x64C0, 0x64C0, 0x65C0, 0x3780, 0x3700 ], // e
    [ 0, 0x300, 0x300, 0x7FF8, 0x7FFC, 0x30C, 0x30C, 0x1C, 0x18, 0 ], // f
    [ 0x1C7C, 0x3CFE, 0x71C7, 0x6183, 0x6183, 0x6183, 0x6183, 0x70C7, 0x3FFE, 0x1FFC ], // g
    [ 0x7FFC, 0x7FFC, 0x180, 0xC0, 0xC0, 0xC0, 0xC0, 0x1C0, 0x7F80, 0x7F00 ], // h
    [ 0, 0, 0, 0, 0x7FB0, 0x7FB0, 0, 0, 0, 0 ], // i
    [ 0x3000, 0x7000, 0x6000, 0x6000, 0x7FF6, 0x3FF6, 0, 0, 0, 0 ], // j
    [ 0, 0x7FFC, 0x7FFC, 0x600, 0xF00, 0x1F80, 0x39C0, 0x70E0, 0x6060, 0 ], // k
    [ 0, 0, 0, 0, 0x7FFC, 0x7FFC, 0, 0, 0, 0 ], // l
    [ 0x7FC0, 0x7FC0, 0x1C0, 0x380, 0x700, 0x700, 0x380, 0x1C0, 0x7FC0, 0x7FC0 ], // m
    [ 0x7FC0, 0x7FC0, 0x180, 0xC0, 0xC0, 0xC0, 0xC0, 0x1C0, 0x7F80, 0x7F00 ], // n
    [ 0x1F00, 0x3F80, 0x71C0, 0x60C0, 0x60C0, 0x60C0, 0x60C0, 0x71C0, 0x3F80, 0x1F00 ], // o
    [ 0x7FFC, 0x7FFE, 0xC7, 0x183, 0x183, 0x183, 0x183, 0x1C7, 0xFE, 0x7C ], // p
    [ 0x7C, 0xFE, 0x1C7, 0x183, 0x183, 0x183, 0x183, 0xC7, 0x7FFE, 0x7FFC ], // q
    [ 0x7FC0, 0x7FC0, 0x380, 0x1C0, 0xC0, 0xC0, 0xC0, 0x1C0, 0x380, 0x300 ], // r
    [ 0x6380, 0x67C0, 0x67C0, 0x66C0, 0x66C0, 0x6CC0, 0x6CC0, 0x7CC0, 0x7CC0, 0x38C0 ], // s
    [ 0, 0xC0, 0xC0, 0xC0, 0x3FFC, 0x7FFC, 0x60C0, 0x60C0, 0xC0, 0 ], // t
    [ 0x1FC0, 0x3FC0, 0x7000, 0x6000, 0x6000, 0x6000, 0x7000, 0x3800, 0x7FC0, 0x7FC0 ], // u
    [ 0x1C0, 0x7C0, 0x1F00, 0x7C00, 0x7000, 0x7000, 0x7C00, 0x1F00, 0x7C0, 0x1C0 ], // v
    [ 0x7FC0, 0x7FC0, 0x7000, 0x3800, 0x1C00, 0x1C00, 0x3800, 0x7000, 0x7FC0, 0x7FC0 ], // w
    [ 0x60C0, 0x71C0, 0x3B80, 0x1F00, 0xE00, 0xE00, 0x1F00, 0x3B80, 0x71C0, 0x60C0 ], // x
    [ 0x187F, 0x38FF, 0x71C0, 0x6180, 0x6180, 0x6180, 0x6180, 0x70C0, 0x3FFF, 0x1FFF ], // y
    [ 0x78C0, 0x78C0, 0x6CC0, 0x6CC0, 0x6CC0, 0x66C0, 0x66C0, 0x66C0, 0x63C0, 0x63C0 ], // z
];

pub fn get_glyph(character: char) -> GlyphMap {
    return match character {
        'A' => FONT[1],
        'B' => FONT[2],
        'C' => FONT[3],
        'D' => FONT[4],
        'E' => FONT[5],
        'F' => FONT[6],
        'G' => FONT[7],
        'H' => FONT[8],
        'I' => FONT[9],
        'J' => FONT[10],
        'K' => FONT[11],
        'L' => FONT[12],
        'M' => FONT[13],
        'N' => FONT[14],
        'O' => FONT[15],
        'P' => FONT[16],
        'Q' => FONT[17],
        'R' => FONT[18],
        'S' => FONT[19],
        'T' => FONT[20],
        'U' => FONT[21],
        'V' => FONT[22],
        'W' => FONT[23],
        'X' => FONT[24],
        'Y' => FONT[25],
        'Z' => FONT[26],
        'a' => FONT[27],
        'b' => FONT[28],
        'c' => FONT[29],
        'd' => FONT[30],
        'e' => FONT[31],
        'f' => FONT[32],
        'g' => FONT[33],
        'h' => FONT[34],
        'i' => FONT[35],
        'j' => FONT[36],
        'k' => FONT[37],
        'l' => FONT[38],
        'm' => FONT[39],
        'n' => FONT[40],
        'o' => FONT[41],
        'p' => FONT[42],
        'q' => FONT[43],
        'r' => FONT[44],
        's' => FONT[45],
        't' => FONT[46],
        'u' => FONT[47],
        'v' => FONT[48],
        'w' => FONT[49],
        'x' => FONT[50],
        'y' => FONT[51],
        'z' => FONT[52],
        _ => FONT[0],
    };
}